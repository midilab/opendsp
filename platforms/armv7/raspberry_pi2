#!/bin/bash
# host dependencies:
# on archlinux
# sudo pacman -S multipath-tools parted sshpass zip dosfstools binfmt-support qemu-user-static arch-install-scripts
# most debian based
# sudo apt-get install multipath-tools parted sshpass zip dosfstools binfmt-support qemu-user-static
# Register the qemu-arm-static as an ARM interpreter in the kernel (using binfmt_misc kernel module)
# as root:
#sudo update-binfmts --enable arm
#sudo systemctl enable binfmt-support.service # to load on boot up
# or
# echo ':arm:M::\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-arm-static:' > /proc/sys/fs/binfmt_misc/register

boot_size=128
root_size=3300
home_size=256
device=""

prepare() {

	image_name=$1

	image_size=$(($boot_size+$root_size+$home_size+64))

	dd if=/dev/zero of=$image_name  bs=1M  count=$image_size
		
	# partitioning
	fdisk $image_name <<EOF
o
n



+$(($boot_size))M
t
c
n



+$(($root_size))M
n



+$(($home_size))M
p
w
EOF

	# prepare img
	device="$(losetup --show -f -P "$image_name")"
	bootpart="${device}p1"
	rootpart="${device}p2"
	homepart="${device}p3"

	# setup boot partition
	mkfs.fat -n BOOT $bootpart
	# setup root partition
	mkfs.ext4 -L ROOT $rootpart
	# setup user land partition
	mkfs.ext4 -L OPENDSP $homepart

	fdisk -l $image_name

	# mount root
	mkdir -v opendsp
	mount -v -t ext4 -o sync $rootpart opendsp
	
	# mount boot
	mkdir -v opendsp/boot
	mount -v -t vfat -o sync $bootpart opendsp/boot
	
	# mount user land
	mkdir -v opendsp/home
	mkdir -v opendsp/home/opendsp
	mkdir -v opendsp/home/opendsp/data
	mount -v -t ext4 -o sync $homepart opendsp/home/opendsp/data
	
}

mount_img() {
	
	image_name=$1
	
	# mount on loop device
	device="$(losetup --show -f -P "$image_name")"
	bootpart="${device}p1"
	rootpart="${device}p2"
	homepart="${device}p3"

	# mount root
	mkdir -v opendsp
	mount -v -t ext4 -o sync $rootpart opendsp
	
	# mount boot
	mount -v -t vfat -o sync $bootpart opendsp/boot
	
	# mount user land
	mount -v -t ext4 -o sync $homepart opendsp/home/opendsp/data
	
	# good idea to have those mounted as we chroot in
	mount -t proc /proc opendsp/proc
	mount -o bind /dev opendsp/dev
	mount -o bind /sys opendsp/sys
	
	# prepare for chroot using qemu
	cp /usr/bin/qemu-arm-static opendsp/usr/bin/	
	
	# copy temporarly our resolv.conf to get internet connection
	mkdir -p opendsp/run/systemd/resolve/
	cp /etc/resolv.conf opendsp/run/systemd/resolve/
	
}

umount_img() {

	device_name=$1	
	
	# just in case, sometimes they can lock /dev/
	killall gpg-agent || true
	killall pacman || true
	 
	# remove installed packages on /var/cache/pacman/pkg/
	rm opendsp/var/cache/pacman/pkg/* || true

	# remove our systemd resolv.conf
	rm -rf opendsp/run/systemd/ || true

	# after all remove qemu
	rm opendsp/usr/bin/qemu-arm-static || true

	sync

	retVal=-1
	while [ $retVal -ne 0 ]; do
		umount --recursive opendsp/ || true 
		retVal=$?
	done

	rm -rf opendsp

	# release the image
	losetup -d $device_name
		
}

install() {
		
	# install platform into img
	wget http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-2-latest.tar.gz
	bsdtar -xvpf ArchLinuxARM-rpi-2-latest.tar.gz -C opendsp || true
	#tar -xzvf ArchLinuxARM-rpi-2-latest.tar.gz -C opendsp 

	# prepare for chroot using qemu
	echo  ':arm:M::\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-arm-static:' > /proc/sys/fs/binfmt_misc/register || true
	cp /usr/bin/qemu-arm-static opendsp/usr/bin/

	# good idea to have those mounted as we chroot in
	mount -t proc /proc opendsp/proc
	mount -o bind /dev opendsp/dev
	mount -o bind /sys opendsp/sys
	
	# copy temporarly our resolv.conf to get internet connection
	mkdir -p opendsp/run/systemd/resolve/
	cp /etc/resolv.conf opendsp/run/systemd/resolve/

	retVal=-1
	while [ $retVal -ne 0 ]; do
		chroot opendsp pacman-key --init || true
		retVal=$?    
	done

	retVal=-1
	while [ $retVal -ne 0 ]; do
		chroot opendsp pacman-key --populate archlinuxarm || true
		retVal=$?  
	done

	retVal=-1
	while [ $retVal -ne 0 ]; do
		chroot opendsp pacman -Syyu || true
		#chroot opendsp pacman -Sy || true
		retVal=$?
	done

	# first run script
	cat <<EOF > opendsp/boot/opendsp_1st_run.sh
#!/bin/bash -v

set -e

systemctl stop smb
systemctl stop nmb
umount -v /home/opendsp/data

parted /dev/mmcblk0 <<\EOF
resizepart
3
-16M
q
\EOF

e2fsck /dev/mmcblk0p3
resize2fs /dev/mmcblk0p3

# set output of onboard always to jack
amixer cset numid=3 1

EOF

}	

tunning() {

	# enable broadcom video core drivers for GPU acceleration
	# delete first ocurrence of gpu_men
	#sed -i '/gpu_mem/d' opendsp/boot/cmdline.txt		
	
	echo "gpu_mem=256" >> opendsp/boot/config.txt
	##echo "avoid_warnings=2" >> opendsp/boot/config.txt
	echo "dtoverlay=vc4-kms-v3d" >> opendsp/boot/config.txt
	
	# enable onboard sound
	echo "dtparam=audio=on" >> opendsp/boot/config.txt
	echo "disable_audio_dither=1" >> opendsp/boot/config.txt
	# other vendors soundcards
	#dtoverlay=hifiberry-dacplus
	###dtoverlay=hifiberry-dac
	###dtoverlay=hifiberry-digi
	###dtoverlay=hifiberry-amp
	###dtoverlay=audioinjector-wm8731-audio
	###dtoverlay=iqaudio-dac
	###dtoverlay=iqaudio-dacplus
	###dtoverlay=iqaudio-digi-wm8804-audio
	###dtoverlay=pisound
	###dtoverlay=justboom-dac
	###dtoverlay=justboom-digi
	###dtoverlay=i2s-mmap
	###dtoverlay=pi3-disable-bt
	##dtoverlay=pi3-disable-wifi
	
	# enable MIDI overlay driver for uart
	echo "enable_uart=1" >> opendsp/boot/config.txt
	echo "dtoverlay=pi3-miniuart-bt" >> opendsp/boot/config.txt
	echo "dtoverlay=midi-uart0" >> opendsp/boot/config.txt

	# config defaults for hdmi
	echo "hdmi_force_hotplug=1" >> opendsp/boot/config.txt
	#echo "hdmi_drive=2" >> opendsp/boot/config.txt
	#echo "hdmi_group=1" >> opendsp/boot/config.txt
	#echo "hdmi_mode=1" >> opendsp/boot/config.txt
	#disable_splash=1
	#disable_overscan=1
	#hdmi_pixel_encoding=1
	#hdmi_force_hotplug=1
	###framebuffer_width=1280
	###framebuffer_height=800
	#framebuffer_depth=16
	#framebuffer_ignore_alpha=1
	
	# install xf86 drivers for vc4 broadcom GPU
	retVal=-1
	while [ $retVal -ne 0 ]; do
		chroot opendsp pacman -S xf86-video-fbdev || true
		#chroot opendsp pacman -S xf86-video-fbturbo-git || true
		retVal=$?
	done	
	
	# take uart usage off for console, we need it for MIDI uart
	sed -i 's/ console=ttyAMA0,115200//' opendsp/boot/cmdline.txt
	sed -i 's/ kgdboc=ttyAMA0,115200//' opendsp/boot/cmdline.txt
	
	# take off all visual noise at boot stage, set boot process to output only a blank screen
	sed -i 's/ console=tty1/ console=null fsck.repair=yes dwc_otg.speed=1 quiet logo.nologo consoleblank=0/' opendsp/boot/cmdline.txt
	echo "disable_splash=1" >> opendsp/boot/config.txt
	echo "avoid_warnings=1" >> opendsp/boot/config.txt
	
	# boot read only file system
	sed -i 's/ rw/ ro /' opendsp/boot/cmdline.txt	
	
	# set read only file systems
	cat <<EOF > opendsp/etc/fstab
# Static information about the filesystems.
# See fstab(5) for details.

# readonly filesystems
/dev/mmcblk0p1  /boot                   vfat    ro,auto,exec            0       2
/dev/mmcblk0p2  /                       ext4    defaults,noatime,ro     0       1
/dev/mmcblk0p3  /home/opendsp/data      ext4    defaults,noatime,rw     0       1
EOF
		
	## Remount /dev/shm to prevent memory allocation errors
	#sudo mount -o remount,size=128M /dev/shm
}	

install_packages() {

	# install opendsp packages
	mkdir opendsp/root/opendsp
	cp ../packages/armv7/* opendsp/root/opendsp/

	declare -a package=("mididings-git" "lv2-git" "ganv-git" "raul-git" "serd-git" "sord-git" "suil-git" "lilv-git"  "ingen-git" "jamrouter-git" "mod-ttymidi" "distrho-lv2-git" "midifilter.lv2-git" "fabla-git" "drmr-falktx-git" "swh-lv2-git" "zam-plugins-git" "dpf-plugins-lv2-git" "openav-luppp-git" "mixxx" "novnc" "opendspd")
	
	for i in "${package[@]}"
	do
		retVal=-1
		while [ $retVal -ne 0 ]; do
			#chroot opendsp pacman --noconfirm -U "/root/opendsp/${i}.pkg.tar.xz" || true
			chroot opendsp pacman -U "/root/opendsp/${i}.pkg.tar.xz" || true
			retVal=$?
		done
	done
	
	rm -rf opendsp/root/opendsp/
	
}

finish() {

	image_name=$1

	# just in case, sometimes they can lock /dev/
	killall gpg-agent || true
	killall pacman || true
	 
	# remove installed packages on /var/cache/pacman/pkg/
	rm opendsp/var/cache/pacman/pkg/*

	# remove our systemd resolv.conf
	rm -rf opendsp/run/systemd/

	# after all remove qemu
	rm opendsp/usr/bin/qemu-arm-static

	sync

	retVal=-1
	while [ $retVal -ne 0 ]; do
		#umount --recursive --lazy opendsp/ || true 
		umount --recursive opendsp/ || true
		retVal=$?
	done

	rm -rf opendsp

	# release the image
	losetup -d $device
	
}
