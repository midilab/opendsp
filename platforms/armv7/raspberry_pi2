#!/bin/bash
# host dependencies:
# on archlinux
# sudo pacman -S multipath-tools parted sshpass zip dosfstools binfmt-support qemu-user-static arch-install-scripts
# most debian based
# sudo apt-get install multipath-tools parted sshpass zip dosfstools binfmt-support qemu-user-static
# Register the qemu-arm-static as an ARM interpreter in the kernel (using binfmt_misc kernel module)
# as root:
#sudo update-binfmts --enable arm
#sudo systemctl enable binfmt-support.service # to load on boot up
# or
# bash -c 'echo ":arm:M::\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-arm-static:POCF" > /proc/sys/fs/binfmt_misc/register'

boot_size=128
root_size=4300
data_size=256
device=""

prepare_img() {

	image_name=$1

	image_size=$(($boot_size+$root_size+$data_size+64))

	dd if=/dev/zero of=$image_name  bs=1M  count=$image_size
		
	# partitioning
	fdisk $image_name <<EOF
o
n



+$(($boot_size))M
t
c
n



+$(($root_size))M
n



+$(($data_size))M
p
w
EOF

	# prepare img
	device="$(losetup --show -f -P "$image_name")"
	bootpart="${device}p1"
	rootpart="${device}p2"
	datapart="${device}p3"

	# setup boot partition
	mkfs.fat -n BOOT $bootpart
	# setup root partition
	mkfs.ext4 -L ROOT $rootpart
	# setup user land partition
	mkfs.ext4 -L OPENDSP $datapart

	fdisk -l $image_name

	# mount root
	mkdir -v opendsp
	mount -v -t ext4 -o sync $rootpart opendsp
	
	# mount boot
	mkdir -v opendsp/boot
	mount -v -t vfat -o sync $bootpart opendsp/boot
	
	# mount user land
	mkdir -v opendsp/home
	mkdir -v opendsp/home/opendsp
	mkdir -v opendsp/home/opendsp/data
	mount -v -t ext4 -o sync $datapart opendsp/home/opendsp/data
	
}

install_img() {
		
	if [ ! -d "opendsp/lost+found" ]
	then
		echo "no lost found"
	fi

	# install platform into img
	wget http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-2-latest.tar.gz
	bsdtar -xvpf ArchLinuxARM-rpi-2-latest.tar.gz -C opendsp || true
	#tar -xzvf ArchLinuxARM-rpi-2-latest.tar.gz -C opendsp 

	# prepare for chroot using qemu
	cp /usr/bin/qemu-arm-static opendsp/usr/bin/

	# good idea to have those mounted as we chroot in
	mount -t proc /proc opendsp/proc
	mount -o bind /sys opendsp/sys
	mount -o bind /dev opendsp/dev
	mount -o bind /dev/pts opendsp/dev/pts
	
	# copy temporarly our resolv.conf to get internet connection
	mkdir -p opendsp/run/systemd/resolve/
	cp /etc/resolv.conf opendsp/run/systemd/resolve/

	retVal=-1
	while [ $retVal -ne 0 ]; do
		chroot opendsp pacman-key --init || true
		retVal=$?    
	done

	retVal=-1
	while [ $retVal -ne 0 ]; do
		chroot opendsp pacman-key --populate archlinuxarm || true
		retVal=$?  
	done

	retVal=-1
	while [ $retVal -ne 0 ]; do
		chroot opendsp pacman -Syyu || true
		#chroot opendsp pacman -Sy || true
		retVal=$?
	done

	retVal=-1
	while [ $retVal -ne 0 ]; do
		chroot opendsp ssh-keygen -A || true
		retVal=$?  
	done

	# delete tar install image
	rm ArchLinuxARM-rpi-2-latest.tar.gz
}	

mount_img() {
	
	image_name=$1
	
	# mount on loop device
	device="$(losetup --show -f -P "$image_name")"
	bootpart="${device}p1"
	rootpart="${device}p2"
	datapart="${device}p3"

	# mount root
	mkdir -v opendsp
	mount -v -t ext4 -o sync $rootpart opendsp
	
	# mount boot
	mount -v -t vfat -o sync $bootpart opendsp/boot
	
	# mount user land
	mount -v -t ext4 -o sync $datapart opendsp/home/opendsp/data
	
	# good idea to have those mounted as we chroot in
	mount -t proc /proc opendsp/proc
	mount -o bind /sys opendsp/sys
	mount -o bind /dev opendsp/dev
	mount -o bind /dev/pts opendsp/dev/pts
	
	# prepare for chroot using qemu
	cp /usr/bin/qemu-arm-static opendsp/usr/bin/	
	
	# copy temporarly our resolv.conf to get internet connection
	mkdir -p opendsp/run/systemd/resolve/
	cp /etc/resolv.conf opendsp/run/systemd/resolve/
}

umount_img() {

	device_name=$1	
	
	# just in case, sometimes they can lock /dev/
	killall gpg-agent || true
	killall pacman || true
	 
	# remove installed packages on /var/cache/pacman/pkg/
	rm opendsp/var/cache/pacman/pkg/* || true

	# remove our systemd resolv.conf
	rm -rf opendsp/run/systemd/ || true

	# after all remove qemu
	rm opendsp/usr/bin/qemu-arm-static || true

	sync

	retVal=-1
	while [ $retVal -ne 0 ]; do
		umount --recursive opendsp/
		retVal=$?
	done

	rm -rf opendsp

	# release the image
	losetup -d $device_name
		
}

tunning_img() {

	# resize sd user data script
	echo '#!/bin/bash' > opendsp/usr/bin/resizesd
	echo 'set -e' >> opendsp/usr/bin/resizesd
	echo 'read -p "Do you want to resize your data partition? Press enter to continue"' >> opendsp/usr/bin/resizesd
	echo 'echo "Stoping OpenDSP and services..."' >> opendsp/usr/bin/resizesd
	echo 'systemctl stop opendsp || true' >> opendsp/usr/bin/resizesd
	echo 'systemctl stop smb || true' >> opendsp/usr/bin/resizesd
	echo 'systemctl stop nmb || true' >> opendsp/usr/bin/resizesd
	echo 'sleep 5' >> opendsp/usr/bin/resizesd
	echo 'umount -v /home/opendsp/data || true' >> opendsp/usr/bin/resizesd
	echo 'echo "Resizing..."' >> opendsp/usr/bin/resizesd
	echo 'parted /dev/mmcblk0 <<EOF' >> opendsp/usr/bin/resizesd
	echo 'resizepart' >> opendsp/usr/bin/resizesd
	echo '3' >> opendsp/usr/bin/resizesd
	echo '-16M' >> opendsp/usr/bin/resizesd
	echo 'q' >> opendsp/usr/bin/resizesd
	echo 'EOF' >> opendsp/usr/bin/resizesd
	echo 'e2fsck -p -f /dev/mmcblk0p3' >> opendsp/usr/bin/resizesd
	echo 'resize2fs /dev/mmcblk0p3' >> opendsp/usr/bin/resizesd
	echo 'read -p "Done! Press enter to reboot your machine..."' >> opendsp/usr/bin/resizesd
	echo 'mount -o remount,rw /' >> opendsp/usr/bin/resizesd
	echo 'rm /usr/bin/resizesd' >> opendsp/usr/bin/resizesd
	echo 'shutdown -r now' >> opendsp/usr/bin/resizesd

	# setup boot/config.txt
	#sed -i '/gpu_mem/d' opendsp/boot/config.txt		
	#echo "gpu_mem=64" >> opendsp/boot/config.txt
	echo "# video accell drivers" >> opendsp/boot/config.txt
	echo "#dtoverlay=vc4-fkms-v3d" >> opendsp/boot/config.txt
	echo "#dtoverlay=vc4-kms-v3d" >> opendsp/boot/config.txt

	echo "# on-board audio" >> opendsp/boot/config.txt
	echo "dtparam=audio=on" >> opendsp/boot/config.txt
	echo "disable_audio_dither=1" >> opendsp/boot/config.txt
	echo "audio_pwm_mode=2" >> opendsp/boot/config.txt

	echo "# most common sound cards overlay drivers" >> opendsp/boot/config.txt
	echo "#dtoverlay=hifiberry-dacplus" >> opendsp/boot/config.txt
	echo "#dtoverlay=hifiberry-dac" >> opendsp/boot/config.txt
	echo "#dtoverlay=hifiberry-digi" >> opendsp/boot/config.txt
	echo "#dtoverlay=hifiberry-amp" >> opendsp/boot/config.txt
	echo "#dtoverlay=audioinjector-wm8731-audio" >> opendsp/boot/config.txt
	echo "#dtoverlay=iqaudio-dac" >> opendsp/boot/config.txt
	echo "#dtoverlay=iqaudio-dacplus" >> opendsp/boot/config.txt
	echo "#dtoverlay=iqaudio-digi-wm8804-audio" >> opendsp/boot/config.txt
	echo "#dtoverlay=pisound" >> opendsp/boot/config.txt
	echo "#dtoverlay=justboom-dac" >> opendsp/boot/config.txt
	echo "#dtoverlay=justboom-digi" >> opendsp/boot/config.txt
	echo "#dtoverlay=iqaudio-dac" >> opendsp/boot/config.txt

	echo "# enable MMAP support for jack" >> opendsp/boot/config.txt
	echo "dtoverlay=i2s-mmap" >> opendsp/boot/config.txt

	echo "# periphericals" >> opendsp/boot/config.txt
	echo "#dtoverlay=pi3-disable-bt" >> opendsp/boot/config.txt
	echo "#dtoverlay=pi3-disable-wifi" >> opendsp/boot/config.txt
	echo "enable_uart=1" >> opendsp/boot/config.txt
	echo "dtoverlay=pi3-miniuart-bt" >> opendsp/boot/config.txt
	echo "dtoverlay=midi-uart0" >> opendsp/boot/config.txt

	echo "# hdmi" >> opendsp/boot/config.txt
	echo "#hdmi_safe=1" >> opendsp/boot/config.txt
	echo "disable_overscan=1" >> opendsp/boot/config.txt
	echo "hdmi_force_hotplug=1" >> opendsp/boot/config.txt
	echo "hdmi_drive=2" >> opendsp/boot/config.txt
	echo "hdmi_group=1" >> opendsp/boot/config.txt
	echo "hdmi_mode=4" >> opendsp/boot/config.txt

	echo "# general" >> opendsp/boot/config.txt
	echo "disable_splash=1" >> opendsp/boot/config.txt
	echo "avoid_warnings=1" >> opendsp/boot/config.txt
	echo "max_usb_current=1" >> opendsp/boot/config.txt

	echo "# gpu overclock" >> opendsp/boot/config.txt
	echo "#force_turbo=1" >> opendsp/boot/config.txt
	echo "#boot_delay=1" >> opendsp/boot/config.txt
	echo "#avoid_pwm_pll=1" >> opendsp/boot/config.txt
	echo "#v3d_freq=450" >> opendsp/boot/config.txt

	echo "# overclock pi2" >> opendsp/boot/config.txt
	echo "#arm_freq=1050" >> opendsp/boot/config.txt
	echo "#over_voltage=4" >> opendsp/boot/config.txt
	echo "#core_freq=525" >> opendsp/boot/config.txt
	echo "#gpu_freq=350" >> opendsp/boot/config.txt
	echo "#sdram_freq=480" >> opendsp/boot/config.txt
	echo "#over_voltage_sdram_p=2" >> opendsp/boot/config.txt
	echo "#over_voltage_sdram_i=2" >> opendsp/boot/config.txt
	echo "#over_voltage_sdram_c=2" >> opendsp/boot/config.txt

	echo "# overclock pi3" >> opendsp/boot/config.txt
	echo "#arm_freq=1350" >> opendsp/boot/config.txt
	echo "#over_voltage=4" >> opendsp/boot/config.txt
	echo "#core_freq=500" >> opendsp/boot/config.txt
	
	# take uart usage off for console, we need it for MIDI uart
	sed -i 's/ console=ttyAMA0,115200//' opendsp/boot/cmdline.txt
	sed -i 's/ kgdboc=ttyAMA0,115200//' opendsp/boot/cmdline.txt
	# take off all visual noise at boot stage, set boot process to output only a blank screen
	sed -i 's/ console=tty1/ console=null fsck.repair=yes dwc_otg.speed=1 quiet logo.nologo consoleblank=0/' opendsp/boot/cmdline.txt
	# boot read only file system
	sed -i 's/ rw/ ro/' opendsp/boot/cmdline.txt	
	
	# set read only file systems
	cat <<EOF > opendsp/etc/fstab
# Static information about the filesystems.
# See fstab(5) for details.

# readonly filesystems
/dev/mmcblk0p1  /boot                   vfat    ro,auto,exec            0       2
/dev/mmcblk0p2  /                       ext4    defaults,noatime,ro     0       1
/dev/mmcblk0p3  /home/opendsp/data      ext4    defaults,noatime,rw     0       1
# ram memory runtime filesystems
tmpfs           /var/tmp        tmpfs   defaults,noatime,mode=0755      0       0
tmpfs           /var/log        tmpfs   defaults,noatime,mode=0755      0       0
EOF

	# install xf86 drivers for vc4 broadcom GPU
	retVal=-1
	while [ $retVal -ne 0 ]; do
		chroot opendsp pacman -S xf86-video-fbdev || true
		retVal=$?
	done	
}	

