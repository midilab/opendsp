#!/bin/bash

root_size=8000
home_size=256
device=""

prepare_img() {

	image_name=$1

	image_size=$(($root_size+$home_size+64))

	dd if=/dev/zero of=$image_name  bs=1M  count=$image_size
		
	# partitioning
	fdisk $image_name <<EOF
o
n



+$(($root_size))M
n



+$(($home_size))M
p
w
EOF

	# prepare img
	device="$(losetup --show -f -P "$image_name")"
	rootpart="${device}p1"
	homepart="${device}p2"

	# setup root partition
	mkfs.ext4 -L ROOT $rootpart
	# setup user land partition
	mkfs.ext4 -L OPENDSP $homepart

	fdisk -l $image_name

	# mount root
	mkdir -v opendsp
	mount -v -t ext4 -o sync $rootpart opendsp
	
	# mount user land
	mkdir -v opendsp/home
	mkdir -v opendsp/home/opendsp
	mkdir -v opendsp/home/opendsp/data
	mount -v -t ext4 -o sync $homepart opendsp/home/opendsp/data	
}

mount_img() {
	
	image_name=$1
	
	# mount on loop device
	device="$(losetup --show -f -P "$image_name")"
	rootpart="${device}p1"
	homepart="${device}p2"

	# mount root
	mkdir -v opendsp
	mount -v -t ext4 -o sync $rootpart opendsp
	
	# mount user land
	mount -v -t ext4 -o sync $homepart opendsp/home/opendsp/data
	
	# good idea to have those mounted as we chroot in
	mount -t proc /proc opendsp/proc
	mount -o bind /sys opendsp/sys
	mount -o bind /dev opendsp/dev
	mount -o bind /dev/pts opendsp/dev/pts
	
	# prepare for chroot using qemu
	cp /usr/bin/qemu-arm-static opendsp/usr/bin/	
	
	# copy temporarly our resolv.conf to get internet connection
	mkdir -p opendsp/run/systemd/resolve/
	cp /etc/resolv.conf opendsp/run/systemd/resolve/
	
}

umount_img() {

	device_name=$1	
	
	# just in case, sometimes they can lock /dev/
	kill -9 `pgrep gpg-agent` || true
	kill -9 `pgrep pacman` || true
	 
	# remove installed packages on /var/cache/pacman/pkg/
	rm opendsp/var/cache/pacman/pkg/* || true

	# remove our systemd resolv.conf
	rm -rf opendsp/run/systemd/ || true

	# after all remove qemu
	rm opendsp/usr/bin/qemu-arm-static || true

	sync

	retVal=-1
	while [ $retVal -ne 0 ]; do
		umount --recursive opendsp/ || true 
		retVal=$?
	done

	rm -rf opendsp

	# release the image
	losetup -d $device_name
		
}

install_img() {
		
	# install platform into img
	wget http://os.archlinuxarm.org/os/ArchLinuxARM-odroid-xu3-latest.tar.gz
	bsdtar -xvpf ArchLinuxARM-odroid-xu3-latest.tar.gz -C opendsp || true

	# flash bootloader 
	cd opendsp/boot/
	sh sd_fusing.sh $device
	cd ../..

	# prepare for chroot using qemu
	cp /usr/bin/qemu-arm-static opendsp/usr/bin/

	# good idea to have those mounted as we chroot in
	mount -t proc /proc opendsp/proc
	mount -o bind /sys opendsp/sys
	mount -o bind /dev opendsp/dev
	mount -o bind /dev/pts opendsp/dev/pts
	
	# copy temporarly our resolv.conf to get internet connection
	mkdir -p opendsp/run/systemd/resolve/
	cp /etc/resolv.conf opendsp/run/systemd/resolve/

	retVal=-1
	while [ $retVal -ne 0 ]; do
		chroot opendsp pacman-key --init || true
		retVal=$?    
	done

	retVal=-1
	while [ $retVal -ne 0 ]; do
		chroot opendsp pacman-key --populate archlinuxarm || true
		retVal=$?  
	done

	retVal=-1
	while [ $retVal -ne 0 ]; do
		chroot opendsp pacman -Syyu || true
		retVal=$?
	done

	retVal=-1
	while [ $retVal -ne 0 ]; do
		chroot opendsp ssh-keygen -A || true
		retVal=$?  
	done

	# delete tar install image
	rm ArchLinuxARM-odroid-xu3-latest.tar.gz
}

tunning_img() {

	# resize sd user data script
	echo '#!/bin/bash' > opendsp/usr/bin/resizesd
	echo 'set -e' >> opendsp/usr/bin/resizesd
	echo 'read -p "Do you want to resize your data partition? Press enter to continue"' >> opendsp/usr/bin/resizesd
	echo 'echo "Stoping OpenDSP and services..."' >> opendsp/usr/bin/resizesd
	echo 'systemctl stop opendsp || true' >> opendsp/usr/bin/resizesd
	echo 'systemctl stop smb || true' >> opendsp/usr/bin/resizesd
	echo 'systemctl stop nmb || true' >> opendsp/usr/bin/resizesd
	echo 'sleep 5' >> opendsp/usr/bin/resizesd
	echo 'umount -v /home/opendsp/data || true' >> opendsp/usr/bin/resizesd
	echo 'echo "Resizing..."' >> opendsp/usr/bin/resizesd
	echo 'parted /dev/mmcblk1 <<EOF' >> opendsp/usr/bin/resizesd
	echo 'resizepart' >> opendsp/usr/bin/resizesd
	echo '2' >> opendsp/usr/bin/resizesd
	echo '-16M' >> opendsp/usr/bin/resizesd
	echo 'q' >> opendsp/usr/bin/resizesd
	echo 'EOF' >> opendsp/usr/bin/resizesd
	echo 'e2fsck -p -f /dev/mmcblk1p2' >> opendsp/usr/bin/resizesd
	echo 'resize2fs /dev/mmcblk1p2' >> opendsp/usr/bin/resizesd
	echo 'read -p "Done! Press enter to reboot your machine..."' >> opendsp/usr/bin/resizesd
	echo 'mount -o remount,rw /' >> opendsp/usr/bin/resizesd
	echo 'rm /usr/bin/resizesd' >> opendsp/usr/bin/resizesd
	echo 'rm -r /home/opendsp/data/lost+found || true' >> opendsp/usr/bin/resizesd
	echo 'shutdown -r now' >> opendsp/usr/bin/resizesd

	chmod 755 opendsp/usr/bin/resizesd

	# take uart usage off for console, we need it for MIDI uart
	sed -i 's/ console=ttySAC2,115200n8//' opendsp/boot/boot.txt
	# take off all visual noise at boot stage, set boot process to output only a blank screen
	sed -i 's/console=tty1/console=null threadirqs isolcpus=1,2,3,4,5,6,7 nohz_full=1,2,3,4,5,6,7 rcu_nocbs=1,2,3,4,5,6,7 fsck.repair=yes dwc_otg.speed=1 quiet logo.nologo consoleblank=0/' opendsp/boot/boot.txt
	# enabling threadirqs and boot read only file system and other system options
	sed -i 's/ rw/ ro/' opendsp/boot/boot.txt

	# needs to install mkimage
	retVal=-1
	while [ $retVal -ne 0 ]; do
		chroot opendsp pacman -S uboot-mkimage || true
		retVal=$?  
	done

	chroot opendsp mkimage -A arm -C none -T script -n 'Boot script for quiet ODROID-U3' -d /boot/boot.txt /boot/boot.scr

	# set read only file systems
	cat <<EOF > opendsp/etc/fstab
# Static information about the filesystems.
# See fstab(5) for details.

# readonly filesystems
/dev/mmcblk1p1  /                       ext4    defaults,noatime,ro     0       1
/dev/mmcblk1p2  /home/opendsp/data      ext4    defaults,noatime,rw     0       1
# ram memory runtime filesystems
tmpfs           /var/tmp        tmpfs   defaults,noatime,mode=0755      0       0
tmpfs           /var/log        tmpfs   defaults,noatime,mode=0755      0       0
EOF

	# install xf86 drivers for vc4 broadcom GPU
	retVal=-1
	while [ $retVal -ne 0 ]; do	
		#odroid-libgl				ODROID-X/X2/U2/U3 Mali GL Driver
		#odroid-xu3-libgl-fb		ODROID-XU3/XU4 Mali driver (framebuffer)
		#odroid-xu3-libgl-headers	ODROID-XU3/XU4 Mali driver headers
		#odroid-xu3-libgl-x11	 	ODROID-XU3/XU4 Mali driver (X11)
		#chroot opendsp pacman -S odroid-xu3-libgl-x11 odroid-xu3-libgl-headers || true
		# this needs special kernel parameter
		chroot opendsp pacman -S xf86-video-fbdev odroid-xu3-libgl-fb || true
		# or xf86-video-armsoc-odroid
		#Section "Device"
		#   Identifier "Mali-Fbdev"
		#   Driver   "armsoc"
		#   Option   "fbdev"           "/dev/fb0"
		#   Option  "DriverName"      "exynos"
		#   Option  "Debug" "false"
		#EndSection
		#
		#Section "Screen"
		#   Identifier   "Mali-Screen"
		#   Device       "Mali-Fbdev"
		#   DefaultDepth 24 
		#EndSection
		#
		#Section "DRI"
		#   Mode 0666
		#EndSection
		retVal=$?
	done

}	
